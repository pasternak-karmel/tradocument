"use client";

import React, { useState, useEffect } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSlot,
} from "@/components/ui/input-otp";

const FormSchema = z.object({
  pin: z.string().min(6, {
    message: "Your one-time password must be 6 characters.",
  }),
});

export default function TwoFactorSetup() {
  const [qrCodeData, setQrCodeData] = useState<string | null>(null);
  const [secret, setSecret] = useState<string | null>(null);
  const [verificationResult, setVerificationResult] = useState<string | null>(
    null
  );

  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      pin: "",
    },
  });

  useEffect(() => {
    const fetchQRCode = async () => {
      try {
        const response = await fetch("/api/2fa/qrcode");
        const data = await response.json();
        if (data.error) {
          console.error("Error fetching QR code:", data.error);
          return;
        }
        setQrCodeData(data.data);
        setSecret(data.secret);
      } catch (error) {
        console.error("Error fetching QR code:", error);
      }
    };

    fetchQRCode();
  }, []);

  async function onSubmit(data: z.infer<typeof FormSchema>) {
    try {
      const response = await fetch("/api/2fa/verify", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          base32secret: secret,
          pin: data.pin,
        }),
      });
      const result = await response.json();
      setVerificationResult(result.success ? "Success" : "Error");
    } catch (error) {
      console.error("Error verifying 2FA:", error);
      setVerificationResult("Error");
    }
  }

  return (
    <div className="min-h-screen flex flex-col justify-center items-center p-4">
      <h1 className="text-2xl font-bold mb-6">
        Set Up Two-Factor Authentication
      </h1>
      {qrCodeData ? (
        <div className="mb-6">
          <img
            src={qrCodeData}
            alt="Google Authenticator QR Code"
            className="mx-auto"
          />
          <p className="text-center mt-2">
            Scan this QR code with your authenticator app
          </p>
        </div>
      ) : (
        <p>Loading QR code...</p>
      )}
      <Form {...form}>
        <form
          onSubmit={form.handleSubmit(onSubmit)}
          className="w-full max-w-md space-y-6"
        >
          <FormField
            control={form.control}
            name="pin"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Verification Code</FormLabel>
                <FormControl>
                  <InputOTP maxLength={6} {...field}>
                    <InputOTPGroup>
                      <InputOTPSlot index={0} />
                      <InputOTPSlot index={1} />
                      <InputOTPSlot index={2} />
                      <InputOTPSlot index={3} />
                      <InputOTPSlot index={4} />
                      <InputOTPSlot index={5} />
                    </InputOTPGroup>
                  </InputOTP>
                </FormControl>
                <FormDescription>
                  Enter the code generated by your authenticator app
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit" className="w-full">
            Verify
          </Button>
        </form>
      </Form>
      {verificationResult && (
        <p
          className={`mt-4 text-center ${
            verificationResult === "Success" ? "text-green-600" : "text-red-600"
          }`}
        >
          Verification {verificationResult}
        </p>
      )}
    </div>
  );
}
